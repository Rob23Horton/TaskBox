
@inject NavigationManager navManager;

<style>
	.chart-period {
	background-color: #708090 !important;
	border-bottom: 2px solid #000;
	grid-template-columns: 50px repeat( @((MarkupString)(Length).ToString()), 1fr);
	z-index: 1;
	}

	.chart-lines {
	position: absolute;
	height: 100%;
	width: 100%;
	background-color: transparent;
	grid-template-columns: 50px repeat( @((MarkupString)(Length).ToString()), 1fr);
	}

	.chart-row-bars {
	list-style: none;
	display: grid;
	padding: 15px 0;
	margin: 0;
	grid-gap: 10px 0;
	border-bottom: 1px solid #000;
	overflow-x: hidden;
	overflow-y: visible;
	}

	.chart-row {
	display: grid;
	grid-template-columns: 50px repeat( @((MarkupString)(Length).ToString()), 1fr);
	background-color: #DCDCDC;
	}

	.chart-row:nth-child(odd) {
	background-color: #C0C0C0;
	}
</style>


<div class="no-padding-margin gantt-chart-container bttm-margin">
	@if (Items.Count() > 0)
	{
		DateTime currentStart = FirstStart.AddMonths(CurrentPage);
		currentStart = new DateTime(currentStart.Year, currentStart.Month, 1);
		DateTime currentEnd = currentStart.AddDays(Length);

		<div class="movement-container">
			<div class="movement-left" @onclick="GoLeft">
				<svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="bi bi-arrow-left-square" viewBox="0 0 16 16">
					<path fill-rule="evenodd" d="M15 2a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1zM0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2zm11.5 5.5a.5.5 0 0 1 0 1H5.707l2.147 2.146a.5.5 0 0 1-.708.708l-3-3a.5.5 0 0 1 0-.708l3-3a.5.5 0 1 1 .708.708L5.707 7.5z" />
				</svg>
			</div>
			<div class="movement-today">
				@if (Items.OrderByDescending(i => i.Due).First().Due.Date > DateTime.Today.Date)
				{
					<button class="btn btn-primary" @onclick="GoToToday">Go to today</button>
				}
			</div>
			<div class="movement-right" @onclick="GoRight">
				<svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="bi bi-arrow-right-square" viewBox="0 0 16 16">
					<path fill-rule="evenodd" d="M15 2a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1zM0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2zm4.5 5.5a.5.5 0 0 0 0 1h5.793l-2.147 2.146a.5.5 0 0 0 .708.708l3-3a.5.5 0 0 0 0-.708l-3-3a.5.5 0 1 0-.708.708L10.293 7.5z" />
				</svg>
			</div>
		</div>

		<div class="gantt-container">
			<div class="chart">
				<div class="chart-row chart-period">
					<div class="chart-row-item"></div>
					@for (int i = 0; i < Length; i++)
					{
						DateTime date = currentStart.AddDays((double)i);
						@if (date.Date == DateTime.Today.Date)
						{
							<span class="today">@((MarkupString)date.Day.ToString())</span>
						}
						else if (date.Day == 1)
						{
							<span>@((MarkupString)date.ToString("d MMM"))</span>
						}
						else
						{
							<span>@((MarkupString)date.Day.ToString())</span>
						}
					}
				</div>
				<div class="chart-row chart-lines">
					@for (int i = 0; i < Length; i++)
					{
						<span></span>
					}
				</div>
				@foreach (GanttChartObject item in Items.OrderBy(i => i.Start))
				{
					DateTime start = item.Start < currentStart ? currentStart : item.Start;
					int fromStart = (int)((GetDays(currentStart, start) + 2) / Frequency); //Works out days with frequency taken into account

					DateTime due = item.Due > currentEnd ? currentEnd : item.Due.AddDays(1);
					int length = GetDays(start, due);

					<div class="chart-row">
						<div class="chart-row-item">@Items.IndexOf(item)</div>

						@if (item.Due >= currentStart && item.Start <= currentEnd)
						{
							<ul class="chart-row-bars" style="grid-column:@((MarkupString)fromStart.ToString())/@((MarkupString)(fromStart+(length*Frequency)).ToString());" @onclick="@(() => ClickLink(item.Id))">

								<ToolTip>
									<Tip>
										<div class='d-flex flex-column'>
											<label>@item.Name</label>
											<label>Description - @(item.Description.Length > 20 ? item.Description.Substring(0, 20) : item.Description)</label>
											<label>Start Date - @item.Start.ToLongDateString() @item.Start.ToShortTimeString()</label>
											<label>Due Date - @item.Due.ToLongDateString() @item.Due.ToShortTimeString()</label>
											<label>Duration - @item.Duration.Hours Hours @item.Duration.Minutes Mins</label>
										</div>
									</Tip>
									<Content>
										<li class="chart-li">
											@item.Name
										</li>
									</Content>
								</ToolTip>
							</ul>
						}

					</div>
				}
			</div>
		</div>
	}
</div>


@code
{
	[Parameter]
	public string ClickUrl { get; set; }

	[Parameter]
	public int Frequency { get; set; }

	[Parameter]
	public List<GanttChartObject> Items { get; set; }

	public DateTime FirstStart { get; set; }

	private int Length { get; set; }
	private int CurrentPage { get; set; } = 0;

	protected override bool ShouldRender()
	{
		if (Items.Count() > 0)
		{
			FirstStart = Items.OrderBy(i => i.Start).First().Start;

			DateTime currentStart = FirstStart.AddMonths(CurrentPage);
			currentStart = new DateTime(currentStart.Year, currentStart.Month, 1);

			Length = DateTime.DaysInMonth(currentStart.Year, currentStart.Month);
		}

		return base.ShouldRender();
	}

	private int GetDays(DateTime Start, DateTime End)
	{
		return (End.Date - Start.Date).Days;
	}

	private void ClickLink(int Id)
	{
		navManager.NavigateTo($"{ClickUrl}{Id}");
	}

	private void GoLeft()
	{
		CurrentPage = CurrentPage == 0 ? 0 : CurrentPage - 1;
		StateHasChanged();
	}

	private void GoRight()
	{
		if (Items.Count() > 0)
		{
			DateTime lastDue = Items.OrderByDescending(i => i.Due).First().Due;
			DateTime currentDate = new DateTime(FirstStart.Year, FirstStart.Month, 1).AddMonths(CurrentPage + 1);

			if (currentDate.Date > lastDue.Date)
			{
				return;
			}

			CurrentPage += 1;
			StateHasChanged();
		}
	}


	private void GoToToday()
	{
		int monthDifference = ((FirstStart.Year - DateTime.Today.Year) * 12) + FirstStart.Month - DateTime.Today.Month;

		CurrentPage = -monthDifference;
		StateHasChanged();
	}

}
