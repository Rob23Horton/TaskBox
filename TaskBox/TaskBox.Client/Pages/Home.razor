@page "/"
@using System.Security.Claims;

@inject AuthenticationStateProvider authenticationStateProvider;
@inject NavigationManager navManager;
@inject HttpClient httpClient;

<PageTitle>Home</PageTitle>

<AuthorizeView>
	<Authorized>
		<h1>Hello, @UserDetails.UserName</h1>
		<div class="d-flex flex-column">
			@foreach (Project project in Projects)
			{
				<div class="form-control">
					<a href="/project-page/@project.Id">@project.Name</a>
				</div>
			}
		</div>
	</Authorized>
	<NotAuthorized>
		Please log in to continue.
		<a href="/login">Log In</a>
	</NotAuthorized>
</AuthorizeView>

@code
{
	private User UserDetails { get; set; } = new User();
	private List<Project> Projects { get; set; } = new List<Project>();

	protected override async void OnInitialized()
	{
		AuthenticationState authenticationState = await authenticationStateProvider.GetAuthenticationStateAsync();
		Claim? userIdClaim = authenticationState.User.Claims.Where(c => c.Type == ClaimTypes.Sid).FirstOrDefault();

		if (userIdClaim is not null || userIdClaim != default)
		{
			UserDetails.Id = int.Parse(userIdClaim.Value);

			Claim? userNameClaim = authenticationState.User.Claims.Where(c => c.Type == ClaimTypes.Name).FirstOrDefault();
			UserDetails.UserName = userNameClaim.Value;

			LoadUserProjects();
		}

		base.OnInitialized();
	}

	private async void LoadUserProjects()
	{
		try
		{
			Projects = await httpClient.GetFromJsonAsync<List<Project>>($"/api/Project/GetUserProjects?UserId={UserDetails.Id}");

		}
		catch
		{

		}

		StateHasChanged();
	}
}