@page "/project-page/{ProjectId}"


@inject NavigationManager navManager;
@inject HttpClient httpClient;

@inherits BaseLoggedInPage;

@* Renders inherited razor class for authentication to work*@
@{base.BuildRenderTree(__builder);}


<div class="d-flex flex-column page">
	<div class="d-grid">
		<h1 style="grid-column:1;">@ProjectDetails.Name</h1>
		<button type="button" style="grid-column:2;" @onclick="GoToProjectUserPage">Project Users</button>
	</div>
	<div>
		<span>From @ProjectDetails.Start.ToLongDateString() @ProjectDetails.Start.ToShortTimeString()</span>
		<span>To @ProjectDetails.Due.ToLongDateString() @ProjectDetails.Due.ToShortTimeString()</span>
	</div>

	<div class="description-container bttm-margin">
		<span style="white-space: pre-line">
			@ProjectDetails.Description
		</span>
	</div>
	<div class="d-grid bttm-margin">
		<div class="segment-label-container">
			<label>Segements - </label>
		</div>
		<div class="add-segments-container">
			<button class="add-segment-btn" type="button" @onclick="OnShowModalClick">Add Segment</button>
		</div>
	</div>

	<div class="gantt-chart-container bttm-margin">
		<GanttChart
		ClickUrl="/segment-page/"
		Frequency="1"
		Items="@GanttChartItems"
		></GanttChart>
	</div>
</div>

<Modal @ref="modal">
	<Title>Create Segment</Title>
	<Body>
		<div class="d-flex flex-column">
			<div class="w-100">
				<InputText class="w-100" placeholder="Segment Name (Max 24 chars)" maxlength="24" @bind-Value="@NewSegmentDetails.Name" />
			</div>
			<div class="w-100">
				<InputTextArea class="w-100" placeholder="Description" @bind-Value="@NewSegmentDetails.Description" />
			</div>
			<div class="form-control d-flex flex-column">
				<label>Start Date -</label>
				<InputDate Type="InputDateType.DateTimeLocal" @bind-Value="@NewSegmentDetails.Start"></InputDate>
			</div>
			<div class="form-control d-flex flex-column">
				<label>Due Date -</label>
				<InputDate Type="InputDateType.DateTimeLocal" @bind-Value="@NewSegmentDetails.Due"></InputDate>
			</div>
			<div>
				<label>@errorMessage</label>
			</div>
		</div>
	</Body>
	<Footer>
		<div>
			<button type="button" class="btn btn-success" @onclick="AddSegment">Create</button>
			<button type="button" class="btn btn-danger" data-dismiss="modal" @onclick="() => modal.Close()">Cancel</button>
		</div>
	</Footer>
</Modal>


@code
{
	[Parameter]
	public string ProjectId { 
		get{
			return this.Id.ToString();
		}
		set {
			int.TryParse(value, out int id);
			this.Id = id;
		}
	}
	private int Id { get; set; }
	private int UserId { get; set;}

	private Project ProjectDetails { get; set; } = new Project();
	private List<Segment> SegmentDetails { get; set; } = new List<Segment>();
	private List<GanttChartObject> GanttChartItems { get; set; } = new List<GanttChartObject>();

	private Segment NewSegmentDetails { get; set; } = new Segment();

	protected override async void OnInitialized()
	{
		//Gets User Id by using inherited razor class function
		UserId = await base.GetUserId();


		//Calls API to check if user is allowed to do this project
		try
		{
			bool permission = await httpClient.GetFromJsonAsync<bool>($"/api/Project/CheckPermission?UserId={UserId}&ProjectId={Id}");
			if (permission == false)
			{
				navManager.NavigateTo("/access-denied");
				return;
			}
		}
		catch
		{
			return;
		}

		//Loads data to gantt chart
		LoadData();

		base.OnInitialized();
	}

	private async void LoadData()
	{
		try
		{
			//Gets the project details from API
			ProjectDetails = await httpClient.GetFromJsonAsync<Project>($"/api/Project/GetProject?ProjectId={Id}");
		}
		catch
		{
			navManager.NavigateTo("/not-existant");
		}

		//Get segments and puts it in SegmentDetails
		List<Segment> segments;
		try
		{
			segments = await httpClient.GetFromJsonAsync<List<Segment>>($"/api/Segment/SegmentsFromProjectId?ProjectId={Id}");
		}
		catch
		{
			segments = new List<Segment>();
		}
		SegmentDetails = segments;

		GanttChartItems = new List<GanttChartObject>();
		if (segments is not null && segments.Count() > 0)
		{
			foreach (Segment segment in segments)
			{
				try
				{
					GanttChartItems.Add(new GanttChartObject(segment));
				}
				catch
				{
					continue;
				}
			}
		}

		StateHasChanged();
	}

	private async void AddSegment()
	{
		NewSegmentDetails.OwnerProject = Id;

		//Validation on Modal
		if (string.IsNullOrWhiteSpace(NewSegmentDetails.Name))
		{
			errorMessage = "Name cannot be blank!";
			StateHasChanged();
			return;
		}
		else if (string.IsNullOrWhiteSpace(NewSegmentDetails.Description))
		{
			errorMessage = "Description cannot be blank!";
			StateHasChanged();
			return;
		}
		else if (NewSegmentDetails.Start > NewSegmentDetails.Due)
		{
			errorMessage = "Due date cannot be before start date!";
			StateHasChanged();
			return;
		}
		else if (NewSegmentDetails.Start < DateTime.Now.AddYears(-1))
		{
			errorMessage = "Start date cannot be more than a year ago!";
			StateHasChanged();
			return;
		}
		else if (NewSegmentDetails.Start < ProjectDetails.Start)
		{
			errorMessage = "Start date cannot be before project start date!";
			StateHasChanged();
			return;
		}
		else if (NewSegmentDetails.Due > ProjectDetails.Due)
		{
			errorMessage = "Due date cannot be after project due date!";
			StateHasChanged();
			return;
		}

		SegmentAndUser newSegment = new SegmentAndUser(UserId, NewSegmentDetails);

		HttpResponseMessage response = await httpClient.PostAsJsonAsync<SegmentAndUser>("/api/Segment/CreateSegment", newSegment);
		ApiResponse? success = await response.Content.ReadFromJsonAsync<ApiResponse>();

		if (success is null)
		{
			errorMessage = "Something went wrong";
			StateHasChanged();
			return;
		}
		else if (success.Success == false){
			errorMessage = success.Message;
			StateHasChanged();
			return;
		}

		modal.Close();

		//Loads data
		LoadData();
	}


	private Modal modal;
	private string errorMessage = "";

	private void OnShowModalClick()
	{
		modal.Open();
	}

	private void GoToProjectUserPage(){
		navManager.NavigateTo($"/project-user-page/{Id}");
	}
}
