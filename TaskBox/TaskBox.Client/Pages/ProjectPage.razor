@page "/project-page/{ProjectId}"


@inject NavigationManager navManager;
@inject HttpClient httpClient;

@inherits BaseLoggedInPage;

@* Renders inherited razor class for authentication to work*@
@{base.BuildRenderTree(__builder);}


<style>
	.chart-period {
	background-color: #708090 !important;
	border-bottom: 2px solid #000;
	grid-template-columns: 50px repeat( @((MarkupString)(NumOfDays + 1).ToString()), 1fr);
	z-index: 1;
	}

	.chart-lines {
	position: absolute;
	height: 100%;
	width: 100%;
	background-color: transparent;
	grid-template-columns: 50px repeat( @((MarkupString)(NumOfDays + 1).ToString()), 1fr);
	}

	.chart-row-bars {
	list-style: none;
	display: grid;
	padding: 15px 0;
	margin: 0;
	grid-gap: 10px 0;
	border-bottom: 1px solid #000;
	overflow-x: hidden;
	overflow-y: visible;
	}

	.chart-row {
	display: grid;
	grid-template-columns: 50px repeat( @((MarkupString)(NumOfDays + 1).ToString()), 1fr);
	background-color: #DCDCDC;
	}

	.chart-row:nth-child(odd) {
	background-color: #C0C0C0;
	}
</style>


<div class="d-flex flex-column page">
	<h1>@ProjectDetails.Name</h1>

	<div class="description-container bttm-margin">
		<span>
			@ProjectDetails.Description
		</span>
	</div>
	<div class="d-grid bttm-margin">
		<div class="segment-label-container">
			<label>Segements - </label>
		</div>
		<div class="add-segments-container">
			<button class="add-segment-btn" type="button" @onclick="OnShowModalClick">Add Segment</button>
		</div>
	</div>

	<div class="no-padding-margin gantt-chart-container bttm-margin">
		@if (SegmentDetails.Count() > 0)
		{
			<div class="gantt-container">
				<div class="chart">
					<div class="chart-row chart-period">
						<div class="chart-row-item"></div>
						@for (int i = 0; i < NumOfDays + 1; i++)
						{
							DateTime date = FirstStart.AddDays((double)i);
							@if (date.Date == DateTime.Today) {
								<span class="today">@((MarkupString)date.Day.ToString())</span>
							}
							else if (date.Day == 1){
								<span>@((MarkupString)date.ToString("d MMM"))</span>
							}
							else{
								<span>@((MarkupString)date.Day.ToString())</span>
							}
						}
					</div>
					<div class="chart-row chart-lines">
						@for (int i = 0; i < NumOfDays + 1; i++){
							<span></span>
						}
					</div>
					@foreach (Segment segment in SegmentDetails.OrderBy(s => s.Start))
					{

						int fromStart = GetDays(FirstStart, segment.Start) + 2;
						int length = GetDays(segment.Start, segment.Due);
						length = length == 0 ? 0 : length + 1;

						<div class="chart-row">
							<div class="chart-row-item">@SegmentDetails.IndexOf(segment)</div>

							<ul class="chart-row-bars" style="grid-column:@((MarkupString)fromStart.ToString())/@((MarkupString)(fromStart+length).ToString());" @onclick="@(() => GoToSegmentPage(segment.Id))">

								<ToolTip>
									<Tip>
										<div class='d-flex flex-column'>
											<label>@segment.Name</label>
											<label>Description - @(segment.Description.Length > 20? segment.Description.Substring(0, 20) : segment.Description)</label>
											<label>Start Date - @segment.Start.ToLongDateString() @segment.Start.ToShortTimeString()</label>
											<label>Due Date - @segment.Due.ToLongDateString() @segment.Due.ToShortTimeString()</label>
										</div>
									</Tip>
									<Content>
										<li class="chart-li">
											@segment.Name
										</li>
									</Content>
								</ToolTip>
							</ul>
						</div>
					}
				</div>
			</div>
		}
	</div>
</div>

<Modal @ref="modal">
	<Title>Create Segment</Title>
	<Body>
		<div class="d-flex flex-column">
			<div class="w-100">
				<InputText class="w-100" placeholder="Segment Name (Max 24 chars)" maxlength="24" @bind-Value="@NewSegmentDetails.Name" />
			</div>
			<div class="w-100">
				<InputTextArea class="w-100" placeholder="Description" @bind-Value="@NewSegmentDetails.Description" />
			</div>
			<div class="form-control d-flex flex-column">
				<label>Start Date -</label>
				<InputDate Type="InputDateType.DateTimeLocal" @bind-Value="@NewSegmentDetails.Start"></InputDate>
			</div>
			<div class="form-control d-flex flex-column">
				<label>Due Date -</label>
				<InputDate Type="InputDateType.DateTimeLocal" @bind-Value="@NewSegmentDetails.Due"></InputDate>
			</div>
			<div>
				<label>@errorMessage</label>
			</div>
		</div>
	</Body>
	<Footer>
		<div>
			<button type="button" class="btn btn-success" @onclick="AddSegment">Create</button>
			<button type="button" class="btn btn-danger" data-dismiss="modal" @onclick="() => modal.Close()">Cancel</button>
		</div>
	</Footer>
</Modal>


@code
{
	[Parameter]
	public string ProjectId { 
		get{
			return this.Id.ToString();
		}
		set {
			int.TryParse(value, out int id);
			this.Id = id;
		}
	}
	private int Id { get; set; }
	private int UserId { get; set;}

	private Project ProjectDetails { get; set; } = new Project();
	private List<Segment> SegmentDetails { get; set; } = new List<Segment>();

	private int NumOfDays { get; set; } = 0;
	private DateTime FirstStart { get; set; } = new DateTime();

	private Segment NewSegmentDetails { get; set; } = new Segment();

	protected override async void OnInitialized()
	{
		//Gets User Id by using inherited razor class function
		UserId = await base.GetUserId();


		//Calls API to check if user is allowed to do this project
		try
		{
			bool permission = await httpClient.GetFromJsonAsync<bool>($"/api/Project/CheckPermission?UserId={UserId}&ProjectId={Id}");
			if (permission == false)
			{
				navManager.NavigateTo("/access-denied");
				return;
			}
		}
		catch
		{
			return;
		}

		base.OnInitialized();

		//Loads data to gantt chart
		LoadData();
	}

	private async void LoadData()
	{
		try
		{
			//Gets the project details from API
			ProjectDetails = await httpClient.GetFromJsonAsync<Project>($"/api/Project/GetProject?ProjectId={Id}");
		}
		catch
		{
			navManager.NavigateTo("/not-existant");
		}

		//Get segments and puts it in SegmentDetails
		List<Segment> segments;
		try
		{
			segments = await httpClient.GetFromJsonAsync<List<Segment>>($"/api/Segment/SegmentsFromProjectId?ProjectId={Id}");
		}
		catch
		{
			segments = new List<Segment>();
		}
		SegmentDetails = segments;

		NumOfDays = GetTotalDays();


		StateHasChanged();
	}


	private int GetTotalDays()
	{
		Segment firstStart = SegmentDetails.OrderBy(s => s.Start).FirstOrDefault();
		Segment lastDue = SegmentDetails.OrderByDescending(s => s.Due).FirstOrDefault();

		if (firstStart == default || lastDue == default)
		{
			Console.WriteLine("Return");
			return 0;
		}

		FirstStart = firstStart.Start;

		return GetDays(firstStart.Start, lastDue.Due);
	}

	private int GetDays(DateTime Start, DateTime End)
	{
		return (End.Date - Start.Date).Days;
	}



	private async void AddSegment()
	{
		NewSegmentDetails.OwnerProject = Id;

		//Validation on Modal
		if (string.IsNullOrWhiteSpace(NewSegmentDetails.Name))
		{
			errorMessage = "Name cannot be blank!";
			StateHasChanged();
			return;
		}
		else if (string.IsNullOrWhiteSpace(NewSegmentDetails.Description))
		{
			errorMessage = "Description cannot be blank!";
			StateHasChanged();
			return;
		}
		else if (NewSegmentDetails.Start > NewSegmentDetails.Due)
		{
			errorMessage = "Due date cannot be before start date!";
			StateHasChanged();
			return;
		}
		else if (NewSegmentDetails.Start < DateTime.Now.AddYears(-1))
		{
			errorMessage = "Start date cannot be more than a year ago!";
			StateHasChanged();
			return;
		}

		SegmentAndUser newSegment = new SegmentAndUser(UserId, NewSegmentDetails);

		HttpResponseMessage response = await httpClient.PostAsJsonAsync<SegmentAndUser>("/api/Segment/CreateSegment", newSegment);
		ApiResponse? success = await response.Content.ReadFromJsonAsync<ApiResponse>();

		if (success is null)
		{
			errorMessage = "Something went wrong";
			StateHasChanged();
			return;
		}
		else if (success.Success == false){
			errorMessage = success.Message;
			StateHasChanged();
			return;
		}

		Console.WriteLine("Made it past ;)");

		navManager.Refresh(forceReload: true);
	}


	private Modal modal;
	private string errorMessage = "";

	private void OnShowModalClick()
	{
		modal.Open();
	}

	private void OnHideModalClick()
	{
		modal.Close();
	}


	private void GoToSegmentPage(int segmentId)
	{
		navManager.NavigateTo($"/segment-page/{segmentId}/");
	}
}
